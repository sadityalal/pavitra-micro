services:
  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: backend/auth/Dockerfile
    container_name: pavitra-auth
    restart: unless-stopped
    ports:
      - "${AUTH_SERVICE_PORT}:8000"
    env_file:
      - .env
    environment:
      SERVICE_NAME: auth
    volumes:
      - ./backend:/app
      - ./backend/logs/auth:/app/logs
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: backend/product/Dockerfile
    container_name: pavitra-product
    restart: unless-stopped
    ports:
      - "${PRODUCT_SERVICE_PORT}:8000"
    env_file:
      - .env
    environment:
      SERVICE_NAME: product
    volumes:
      - ./backend:/app
      - ./backend/logs/product:/app/logs
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: backend/order/Dockerfile
    container_name: pavitra-order
    restart: unless-stopped
    ports:
      - "${ORDER_SERVICE_PORT}:8000"
    env_file:
      - .env
    environment:
      SERVICE_NAME: order
    volumes:
      - ./backend:/app
      - ./backend/logs/order:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: .
      dockerfile: backend/user/Dockerfile
    container_name: pavitra-user
    restart: unless-stopped
    ports:
      - "${USER_SERVICE_PORT}:8000"
    env_file:
      - .env
    environment:
      SERVICE_NAME: user
    volumes:
      - ./backend:/app
      - ./backend/logs/user:/app/logs
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: backend/payment/Dockerfile
    container_name: pavitra-payment
    restart: unless-stopped
    ports:
      - "${PAYMENT_SERVICE_PORT}:8000"
    env_file:
      - .env
    environment:
      SERVICE_NAME: payment
    volumes:
      - ./backend:/app
      - ./backend/logs/payment:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: backend/notification/Dockerfile
    container_name: pavitra-notification
    restart: unless-stopped
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:8000"
    env_file:
      - .env
    environment:
      SERVICE_NAME: notification
    volumes:
      - ./backend:/app
      - ./backend/logs/notification:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
